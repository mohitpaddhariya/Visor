// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import { ocrPdfOcrPostResponseTransformer } from './transformers.gen';
import type { GetAvailableModelsOcrModelsGetData, GetAvailableModelsOcrModelsGetResponses, OcrPdfOcrPostData, OcrPdfOcrPostErrors, OcrPdfOcrPostResponses, RootGetData, RootGetResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Get Available Models
 *
 * Get detailed information about available OCR models and their features.
 */
export const getAvailableModelsOcrModelsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAvailableModelsOcrModelsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAvailableModelsOcrModelsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/ocr/models',
        ...options
    });
};

/**
 * Ocr Pdf
 *
 * Extract text/layout from PDF using configured OCR models.
 *
 * Available models:
 * - dotsocr: Structured layout JSON with bbox, categories, and formatted text
 * - lightonocr: Clean markdown text extraction
 */
export const ocrPdfOcrPost = <ThrowOnError extends boolean = false>(options: Options<OcrPdfOcrPostData, ThrowOnError>) => {
    return (options.client ?? client).post<OcrPdfOcrPostResponses, OcrPdfOcrPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseTransformer: ocrPdfOcrPostResponseTransformer,
        responseType: 'json',
        url: '/ocr',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};
